{"version":3,"sources":["consumer-object.js","consumer.js"],"names":[],"mappings":"0tBAIa,uBAAA,0BAMT,wBAAY,IAAZ,CAAkB,QAAlB,CAA4B,sCACxB,KAAK,gBAAL,CAAsB,IAAtB,EACA,KAAK,YAAL,CAAoB,QAApB,CACH,sFAMgB,KAAM,CACnB,IAAI,KAAO,OAAO,IAAP,CAAY,IAAZ,CAAX,CAEA,IAAK,IAAI,CAAT,IAAc,IAAd,CAAoB,CAChB,GAAI,KAAK,cAAL,CAAoB,CAApB,CAAJ,CAA4B,CACxB,IAAI,IAAM,KAAK,CAAL,CAAV,CACA,KAAK,GAAL,EAAY,KAAK,GAAL,CAAZ,CACH,CACJ,CACJ;gmBC5BL,+CACA,+CACA,8FACA,uSAOa,iBAAA,oBAYT,kBAAY,QAAZ,CAAsB,WAAtB,CAAiD,oBAAd,OAAc,+CAAN,IAAM,6CAC7C,KAAK,UAAL,CAAkB,WAAlB,CACA,KAAK,UAAL,CAAkB,aAAlB,CACA,KAAK,cAAL,CAAsB,EAAtB,CACA,KAAK,iBAAL,CAAyB,EAAzB,CACA,KAAK,QAAL,CAAgB,QAAhB,CACA,KAAK,WAAL,CAAmB,WAAnB,CACA,KAAK,oBAAL,CAA4B,CAAC,cAAD,CAA5B,CAEA,KAAK,MAAL,CAAc,6BAAiB,SAAjB,CAA2B,WAAK,CAC1C,EAAE,WAAF,CAAc,MAAK,QAAnB,EACH,CAFa,CAAd,CAIA,GAAI,OAAJ,CAAa,CACT,OAAO,MAAP,CAAc,IAAd,CAAoB,OAApB,EACH,CAED,6BACH,8DAOiB,KAAX,IAAW,+CAAJ,EAAI,cACd,OAAO,KAAK,OAAL,CAAa,QAAb,CAAuB,IAAvB,CAA6B,EAA7B,CAAP,CACH,kCAQ0B,KAAvB,IAAuB,+CAAhB,EAAgB,kBAAZ,KAAY,+CAAJ,EAAI,cACvB,IAAI,IAAM,cAAI,KAAJ,CAAU,CAAC,OAAQ,IAAT,CAAe,QAAS,cAAI,UAAJ,CAAe,KAAf,CAAxB,CAAV,CAAV,CACA,OAAO,KAAK,OAAL,CAAa,KAAb,CAAoB,GAApB,CAAyB,EAAzB,CAAP,CACH,sCAQuC,KAAlC,IAAkC,+CAA3B,EAA2B,kBAAvB,IAAuB,+CAAhB,EAAgB,kBAAZ,KAAY,+CAAJ,EAAI,cACpC,IAAI,IAAM,cAAI,KAAJ,CAAU,CAAC,OAAQ,IAAT,CAAe,QAAS,cAAI,UAAJ,CAAe,KAAf,CAAxB,CAAV,CAAV,CACA,OAAO,KAAK,OAAL,CAAa,OAAb,CAAsB,GAAtB,CAA2B,IAA3B,CAAP,CACH,oCAQsC,KAAlC,IAAkC,+CAA3B,EAA2B,kBAAvB,IAAuB,+CAAhB,EAAgB,kBAAZ,KAAY,+CAAJ,EAAI,cACnC,IAAI,IAAM,cAAI,KAAJ,CAAU,CAAC,OAAQ,IAAT,CAAe,QAAS,cAAI,UAAJ,CAAe,KAAf,CAAxB,CAAV,CAAV,CACA,OAAO,KAAK,OAAL,CAAa,MAAb,CAAqB,GAArB,CAA0B,IAA1B,CAAP,CACH,kCAQqC,KAAlC,IAAkC,+CAA3B,EAA2B,kBAAvB,IAAuB,+CAAhB,EAAgB,kBAAZ,KAAY,+CAAJ,EAAI,cAClC,IAAI,IAAM,cAAI,KAAJ,CAAU,CAAC,OAAQ,IAAT,CAAe,QAAS,cAAI,UAAJ,CAAe,KAAf,CAAxB,CAAV,CAAV,CACA,OAAO,KAAK,OAAL,CAAa,KAAb,CAAoB,GAApB,CAAyB,IAAzB,CAAP,CACH,yCAQO,OAAQ,KAAM,KAAM,CAExB,GAAI,CAAC,KAAK,YAAL,CAAkB,MAAlB,CAAD,EAA8B,KAAK,UAAnC,EAAiD,KAAK,UAA1D,CAAsE,CAClE,KAAK,YAAL,GACH,CAJuB,gGAOxB,kBAAmB,OAAO,IAAP,CAAY,KAAK,cAAjB,CAAnB,oHAAqD,KAA5C,MAA4C,aACjD,KAAK,SAAL,CAAe,MAAf,CAAuB,KAAK,cAAL,CAAoB,MAApB,CAAvB,EACH,CATuB,iMAYxB,IAAI,IAAM,kBAAI,IAAJ,CAAV,CACA,IAAI,QAAJ,CAAa,KAAK,iBAAlB,EAGA,KAAO,KAAK,SAAL,CAAe,IAAf,CAAP,CAGA,OAAO,KAAK,MAAL,CAAY,MAAZ,EAAoB,IAAI,QAAJ,EAApB,CAAoC,IAApC,EACF,IADE,CACG,KAAK,cAAL,CAAoB,IAApB,CAAyB,IAAzB,CADH,EAEF,KAFE,CAEI,KAAK,aAAL,CAAmB,IAAnB,CAAwB,IAAxB,CAFJ,CAAP,CAGH,mDAMY,OAAQ,CACjB,IAAI,YAAc,CAAC,KAAD,CAAQ,MAAR,CAAgB,SAAhB,CAA2B,OAA3B,CAAlB,CACA,OAAO,YAAY,QAAZ,CAAqB,OAAO,WAAP,EAArB,CAAP,CACH,oDAKc,CACX,IAAI,UAAY,KAAK,SAAL,CAAe,KAAK,UAApB,CAAhB,CACA,KAAK,cAAL,CAAoB,KAAK,UAAzB,EAAuC,SAAvC,CACA,KAAK,SAAL,CAAe,KAAK,UAApB,CAAgC,SAAhC,EACH,6CAOS,KAAM,CACZ,OAAO,mBAAQ,GAAR,CAAY,IAAZ,CAAP,CACH,6CAOS,KAAM,MAAO,CACnB,KAAK,MAAL,CAAY,SAAZ,CAAsB,WAAK,CACvB,EAAE,UAAF,CAAa,IAAb,CAAmB,KAAnB,EACH,CAFD,EAGH,6CAQS,KAAM,CACZ,IAAI,OAAS,EAAb,CADY,mGAGZ,mBAAgB,OAAO,IAAP,CAAY,IAAZ,CAAhB,yHAAmC,KAA1B,GAA0B,cAC/B,GAAI,CAAC,KAAK,oBAAL,CAA0B,QAA1B,CAAmC,GAAnC,CAAL,CAA8C,CAC1C,OAAO,GAAP,EAAc,KAAK,GAAL,CAAd,CACH,CACJ,CAPW,wMAQZ,OAAO,MAAP,CACH,uDAQc,KAAM,CACjB,IAAI,OAAS,KAAK,KAAL,CAAW,KAAK,QAAhB,CAAb,CACA,OAAO,QAAQ,OAAR,CAAgB,MAAhB,CAAP,CACH,qCAOK,KAAM,CACR,IAAI,OAAS,KAAK,KAAL,CAAW,IAAX,CAAb,CAEA,GAAI,MAAM,OAAN,CAAc,MAAd,CAAJ,CAA2B,CACvB,OAAO,KAAK,SAAL,CAAe,MAAf,CAAP,CACH,CACD,OAAO,KAAK,WAAL,CAAiB,MAAjB,CAAP,CACH,6CAOS,MAAO,CACb,IAAI,KAAO,EAAX,CADa,mGAGb,mBAAmB,KAAnB,yHAA0B,KAAjB,MAAiB,cACtB,KAAK,IAAL,CAAU,IAAI,KAAK,WAAT,CAAqB,MAArB,CAA6B,IAA7B,CAAV,EACH,CALY,wMAMb,OAAO,IAAP,CACH,iDAOW,OAAQ,CAChB,OAAO,IAAI,KAAK,WAAT,CAAqB,MAArB,CAA6B,IAA7B,CAAP,CACH,qDAQa,KAAM,CAChB,OAAO,QAAQ,MAAR,CAAe,IAAf,CAAP,CACH","file":"consumerjs.js","sourcesContent":["/**\n * Base class for object derived from Consumer\n * @abstract\n */\nexport class ConsumerObject {\n    /**\n     * Creates a new object\n     * @param {Object} data Data to parse\n     * @param {Consumer} consumer Consumer instance for this object\n     */\n    constructor(data, consumer) {\n        this.createFromObject(data);\n        this.__consumer__ = consumer;\n    }\n\n    /**\n     * Populates object with data consumed in data\n     * @param {Object} data Data to parse\n     */\n    createFromObject(data) {\n        let keys = Object.keys(data);\n\n        for (let i in keys) {\n            if (keys.hasOwnProperty(i)) {\n                let key = keys[i];\n                this[key] = data[key];\n            }\n        }\n    }\n}","import { HttpClient } from 'aurelia/http-client';\nimport { initialize } from 'aurelia/pal-browser';\nimport Cookies from 'js-cookie/js-cookie';\nimport URI from \"uri\";\n\n\n/**\n * Instantiate to request API endpoints\n * @class\n */\nexport class Consumer {\n    /**\n     * Constructor\n     * Sets this.endpoint to endpoint\n     * Sets this.objectClass to objectClass\n     * Sets this.client to new configured HttpClient\n     * Assigns options to this\n     * Initializes Aurelia browser abstraction\n     * @param {String} endpoint Base endpoint for this API\n     * @param {ConsumerObject} objectClass Class to cast results to\n     * @param {Object} [options] Additional configuration\n     */\n    constructor(endpoint, objectClass, options=null) {\n        this.csrfCookie = 'csrftoken';\n        this.csrfHeader = 'X-CSRFToken';\n        this.defaultHeaders = {};\n        this.defaultParameters = {};\n        this.endpoint = endpoint;\n        this.objectClass = objectClass;\n        this.unserializableFields = ['__consumer__'];\n\n        this.client = new HttpClient().configure(x => {\n            x.withBaseUrl(this.endpoint);\n        });\n\n        if (options) {\n            Object.assign(this, options);\n        }\n\n        initialize();\n    }\n\n    /**\n     * Performs a DELETE request\n     * @param {String} path Path on the endpoint\n     * @returns {Promise}\n     */\n    delete(path = '') {\n        return this.request('delete', path, {});\n    }\n\n    /**\n     * Performs a GET request\n     * @param {String} path Path on the endpoint\n     * @param {Object} query Query parameters\n     * @returns {Promise}\n     */\n    get(path = '', query = {}) {\n        let uri = URI.build({'path': path, 'query': URI.buildQuery(query)});\n        return this.request('get', uri, {});\n    }\n\n    /**\n     * Performs a PATCH request\n     * @param {String} path Path on the endpoint\n     * @param {Object} data Data payload\n     * @returns {Promise}\n     */\n    patch(path = '', data = {}, query = {}) {\n        let uri = URI.build({'path': path, 'query': URI.buildQuery(query)});\n        return this.request('patch', uri, data);\n    }\n\n    /**\n     * Performs a POST request\n     * @param {String} path Path on the endpoint\n     * @param {Object} data Data payload\n     * @returns {Promise}\n     */\n    post(path = '', data = {}, query = {}) {\n        let uri = URI.build({'path': path, 'query': URI.buildQuery(query)});\n        return this.request('post', uri, data);\n    }\n\n    /**\n     * Performs a PUT request\n     * @param {String} path Path on the endpoint\n     * @param {Object} data Data payload\n     * @returns {Promise}\n     */\n    put(path = '', data = {}, query = {}) {\n        let uri = URI.build({'path': path, 'query': URI.buildQuery(query)});\n        return this.request('put', uri, data);\n    }\n\n    /**\n     * Performs a request\n     * @param {String} method The method to use\n     * @param {String} path Path on the endpoint\n     * @param {Object} data Data payload\n     */\n    request(method, path, data) {\n        // Set csrf token if needed\n        if (!this.isSafeMethod(method) && this.csrfCookie && this.csrfHeader) {\n            this.addCsrfToken();\n        }\n\n        // Set default headers\n        for (let header of Object.keys(this.defaultHeaders)) {\n            this.addHeader(header, this.defaultHeaders[header]);\n        }\n\n        // Build query\n        let uri = URI(path);\n        uri.addQuery(this.defaultParameters);\n\n        // Serialize data\n        data = this.serialize(data);\n\n        // Return promise\n        return this.client[method](uri.toString(), data)\n            .then(this.requestSuccess.bind(this))\n            .catch(this.requestFailed.bind(this));\n    }\n\n    /**\n     * Returns whether the request is safe (should not mutate any data)\n     * @returns {Boolean}\n     */\n    isSafeMethod(method) {\n        let saveMethods = ['GET', 'HEAD', 'OPTIONS', 'TRACE'];\n        return saveMethods.includes(method.toUpperCase());\n    }\n\n    /**\n     * Looks for cookie this.csrfCookie and passes it's value to this.csrfHeader\n     */\n    addCsrfToken() {\n        let csrfToken = this.getCookie(this.csrfCookie);\n        this.defaultHeaders[this.csrfHeader] = csrfToken;\n        this.addHeader(this.csrfHeader, csrfToken);\n    }\n\n    /**\n     * Wrapper for Cookies.get\n     * @param {String} name\n     * @returns {String}\n     */\n    getCookie(name) {\n        return Cookies.get(name);\n    }\n\n    /**\n     * Adds a header to all future request\n     * @param {String} name\n     * @param {String} value\n     */\n    addHeader(name, value) {\n        this.client.configure(x => {\n            x.withHeader(name, value);\n        });\n    }\n\n    /**\n     * Serializes data\n     * Excludes fields marked in this.unserializableFields\n     * @param {ConsumerObject|Object} data\n     * @returns {Object}\n     */\n    serialize(data) {\n        let object = {};\n\n        for (let key of Object.keys(data)) {\n            if (!this.unserializableFields.includes(key)) {\n                object[key] = data[key];\n            }\n        }\n        return object;\n    }\n\n    /**\n     * Callback for request\n     * Gets called if request resolve successfully\n     * @param {HttpResponseMessage} data\n     * @returns {ConsumerObject|ConsumerObject[]}\n     */\n    requestSuccess(data) {\n        let result = this.parse(data.response);\n        return Promise.resolve(result);\n    }\n\n    /**\n     * Parses JSON string to a single or list of ConsumerObject instance(s)\n     * @param {String} data\n     * @returns {ConsumerObject|ConsumerObject[]}\n     */\n    parse(json) {\n        let object = JSON.parse(json);\n\n        if (Array.isArray(object)) {\n            return this.parseList(object);\n        }\n        return this.parseScalar(object);\n    }\n\n    /**\n     * Parses anonymous objects to a list of ConsumerObjects\n     * @param {Object[]} array\n     * @returns {ConsumerObject[]}\n     */\n    parseList(array) {\n        let list = [];\n\n        for (let object of array) {\n            list.push(new this.objectClass(object, this));\n        }\n        return list;\n    }\n\n    /**\n     * Parses anonymous object to a single ConsumerObject\n     * @param {Object} object\n     * @returns {ConsumerObject}\n     */\n    parseScalar(object) {\n        return new this.objectClass(object, this);\n    }\n\n    /**\n     * Callback for request\n     * Gets called if request doesnt resolve successfully\n     * @param {HttpResponseMessage} data\n     * @returns {HttpResponseMessage} data\n     */\n    requestFailed(data) {\n        return Promise.reject(data);\n    }\n}"]}