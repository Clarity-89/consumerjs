{"version":3,"sources":["consumer-object.js","consumer.js"],"names":[],"mappings":"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","file":"consumerjs.js","sourcesContent":["/**\n * Base class for object derived from Consumer\n * @abstract\n */\nexport class ConsumerObject {\n    /**\n     * Creates a new object\n     * @param {Object} data Data to parse\n     * @param {Consumer} consumer Consumer instance for this object\n     */\n    constructor(data, consumer) {\n        this.createFromObject(data);\n        this.__consumer__ = consumer;\n    }\n\n    /**\n     * Populates object with data consumed in data\n     * @param {Object} data Data to parse\n     */\n    createFromObject(data) {\n        let keys = Object.keys(data);\n\n        for (let i in keys) {\n            if (keys.hasOwnProperty(i)) {\n                let key = keys[i];\n                this[key] = data[key];\n            }\n        }\n    }\n}","import { HttpClient } from 'aurelia/http-client';\nimport { initialize } from 'aurelia/pal-browser';\nimport URI from \"uri\";\n\n\n/**\n * Instantiate to request API endpoints\n * @class\n */\nexport class Consumer {\n    /**\n     * Constructor\n     * Sets this.endpoint to endpoint\n     * Sets this.objectClass to objectClass\n     * Sets this.client to new configured HttpClient\n     * Initializes Aurelia browser abstraction\n     * @param {String} endpoint Base endpoint for this API\n     * @param {ConsumerObject} objectClass Class to cast results to\n     * @param {Object} [options] Additional configuration\n     */\n    constructor(endpoint, objectClass, options=null) {\n        this.endpoint = endpoint;\n        this.defaultParameters = {};\n        this.objectClass = objectClass;\n\n        this.client = new HttpClient().configure(x => {\n            x.withBaseUrl(this.endpoint);\n        });\n\n        if (options) {\n            Object.assign(this, options);\n        }\n\n\n        initialize();\n    }\n\n    /**\n     * Performs a DELETE request\n     * @param {String} path Path on the endpoint\n     * @returns {Promise}\n     */\n    delete(path = '') {\n        return this.request('delete', path, {});\n    }\n\n    /**\n     * Performs a GET request\n     * @param {String} path Path on the endpoint\n     * @param {Object} query Query parameters\n     * @returns {Promise}\n     */\n    get(path = '', query = {}) {\n        let uri = URI.build({'path': path, 'query': URI.buildQuery(query)});\n        return this.request('get', uri, {});\n    }\n\n    /**\n     * Performs a PATCH request\n     * @param {String} path Path on the endpoint\n     * @param {Object} data Data payload\n     * @returns {Promise}\n     */\n    patch(path = '', data = {}, query = {}) {\n        let uri = URI.build({'path': path, 'query': URI.buildQuery(query)});\n        return this.request('patch', uri, data);\n    }\n\n    /**\n     * Performs a POST request\n     * @param {String} path Path on the endpoint\n     * @param {Object} data Data payload\n     * @returns {Promise}\n     */\n    post(path = '', data = {}, query = {}) {\n        let uri = URI.build({'path': path, 'query': URI.buildQuery(query)});\n        return this.request('post', uri, data);\n    }\n\n    /**\n     * Performs a PUT request\n     * @param {String} path Path on the endpoint\n     * @param {Object} data Data payload\n     * @returns {Promise}\n     */\n    put(path = '', data = {}, query = {}) {\n        let uri = URI.build({'path': path, 'query': URI.buildQuery(query)});\n        return this.request('put', uri, data);\n    }\n\n    /**\n     * Performs a request\n     * @param {String} method The method to use\n     * @param {String} path Path on the endpoint\n     * @param {Object} data Data payload\n     */\n    request(method, path, data) {\n        let uri = URI(path);\n        uri.addQuery(this.defaultParameters);\n\n        return this.client[method](uri.toString(), data)\n            .then(this.requestSuccess.bind(this))\n            .catch(this.requestFailed.bind(this));\n    }\n\n    /**\n     * Callback for request\n     * Gets called if request resolve successfully\n     * @param {HttpResponseMessage} data\n     * @returns {ConsumerObject|ConsumerObject[]}\n     */\n    requestSuccess(data) {\n        let result = this.parse(data.response);\n        return Promise.resolve(result);\n    }\n\n    /**\n     * Parses JSON string to a single or list of ConsumerObject instance(s)\n     * @param {String} data\n     * @returns {ConsumerObject|ConsumerObject[]}\n     */\n    parse(json) {\n        let object = JSON.parse(json);\n\n        if (Array.isArray(object)) {\n            return this.parseList(object);\n        }\n        return this.parseScalar(object);\n    }\n\n    /**\n     * Parses anonymous objects to a list of ConsumerObjects\n     * @param {Object[]} array\n     * @returns {ConsumerObject[]}\n     */\n    parseList(array) {\n        let list = [];\n\n        for (let object of array) {\n            list.push(new this.objectClass(object, this));\n        }\n        return list;\n    }\n\n    /**\n     * Parses anonymous object to a single ConsumerObject\n     * @param {Object} object\n     * @returns {ConsumerObject}\n     */\n    parseScalar(object) {\n        return new this.objectClass(object, this);\n    }\n\n    /**\n     * Callback for request\n     * Gets called if request doesnt resolve successfully\n     * @param {HttpResponseMessage} data\n     * @returns {HttpResponseMessage} data\n     */\n    requestFailed(data) {\n        return Promise.reject(data);\n    }\n}"]}