{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///external \"urijs\"","webpack:///external \"axios\"","webpack:///external \"aurelia-cookie\"","webpack:///./src/abstract-http-client.js","webpack:///./src/http-response-message.js","webpack:///./src/axios-http-client.js","webpack:///./src/abstract-list.js","webpack:///./src/list.js","webpack:///./src/utils.js","webpack:///./src/abstract-consumer.js","webpack:///./src/consumer.js","webpack:///./src/abstract-consumer-object.js","webpack:///./src/consumer-object.js","webpack:///./src/crud-consumer-object.js","webpack:///./src/crud-consumer.js","webpack:///./src/abstract-page-number-list.js","webpack:///./src/page-number-list.js","webpack:///./src/linked-page-number-list.js","webpack:///./src/index.js"],"names":["root","factory","exports","module","define","amd","a","i","global","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","AbstractHTTPClient","consumer","this","baseURL","endpoint","headers","defaultHeaders","Promise","reject","path","match","replace","HttpResponseMessage","response","responseType","statusCode","statusText","assign","trim","AxiosHTTPClient","cancelSource","CancelToken","source","data","query","axios","configured","interceptors","use","createResponse","createError","cancelToken","token","params","transformResponse","json","JSON","stringify","withCredentials","csrfProtection","xsrfCookieName","csrfCookie","xsrfHeaderName","csrfHeader","requestMessage","request","status","error","parseInt","e","__CANCEL__","Boolean","axiosPromise","promise","thrown","isCancel","abort","cancel","method","uri","URI","toString","toLowerCase","getURL","getConfiguration","withAbort","AbstractList","objects","responseData","keys","__consumer__","Array","List","diff","objOld","objNew","result","valueOld","valueNew","isArray","objDiff","length","isObject","excludeUnserializableFields","unserializableFields","entries","indexOf","AbstractConsumer","objectClass","options","contentType","defaultParameters","listClass","parserDataPath","client","build","buildQuery","clientPromise","consumerPromise","setBaseURL","addHeader","header","addQuery","serialize","then","requestSuccess","requestFailed","AureliaCookie","parse","resolve","parserObject","split","forEach","part","parseList","parseScalar","array","consumerObjects","map","parseEntity","Consumer","AbstractConsumerObject","createFromObject","ConsumerObject","CrudConsumerObject","__initial_state__","getPath","newState","changedState","getChangedFields","Error","patch","put","pk","getPK","id","CrudConsumer","push","AbstractPageNumberList","currentMethod","currentPath","currentData","pageField","pageQueryParam","page","pageCountField","pageCount","pageSize","goToPage","Math","max","min","forceGet","requestPage","setSearch","PageNumberList","LinkedPageNumberList","previous","next"],"mappings":"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","file":"consumerjs.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","module.exports = require(\"urijs\");","module.exports = require(\"axios\");","module.exports = require(\"aurelia-cookie\");","/** @module */\nimport { AbstractConsumer } from \"./abstract-consumer\";\n\n/* jshint unused: false */\n\n/**\n * Abstract base class for http clients.\n * @abstract\n */\nexport class AbstractHTTPClient {\n    /**\n     * Configures HTTPClient instance.\n     * @param {AbstractConsumer} consumer Reference to consumer instantiating this object.\n     */\n    constructor(consumer) {\n        /** {AbstractConsumer} Reference to consumer instantiating this object. */\n        this.consumer = consumer;\n\n        /** @type {string} Base URL for all requests, gets concatenated with path passed to request methods. */\n        this.baseURL = this.consumer.endpoint;\n\n        /** @type {Object} An optional object holding key value pairs of additional headers. */\n        this.headers = this.consumer.defaultHeaders;\n    }\n\n    /**\n     * Sets the base url for all requests.\n     * @param baseURL\n     */\n    setBaseURL(baseURL) {\n        this.baseURL = baseURL;\n    }\n\n    /**\n     * Adds header to all requests.\n     * @param {string} name\n     * @param {string} value\n     */\n    addHeader(name, value) {\n        this.headers[name] = value;\n    }\n\n    /**\n     * Performs a DELETE request.\n     * @param {string} [path] Path on the endpoint.\n     * @param {Object} [data] Data payload.\n     * @returns {Promise}\n     */\n    delete(path = '', data = {}) {\n        return Promise.reject('Not implemented!');\n    }\n\n    /**\n     * Performs a GET request.\n     * @param {string} [path] Path on the endpoint.\n     * @param {Object} [data] Data payload.\n     * @returns {Promise}\n     */\n    get(path = '', data = {}) {\n        return Promise.reject('Not implemented!');\n    }\n\n    /**\n     * Performs a PATCH request.\n     * @param {string} [path] Path on the endpoint.\n     * @param {Object} [data] Data payload.\n     * @returns {Promise}\n     */\n    patch(path = '', data = {}) {\n        return Promise.reject('Not implemented!');\n    }\n\n    /**\n     * Performs a POST request.\n     * @param {string} [path] Path on the endpoint.\n     * @param {Object} [data] Data payload.\n     * @returns {Promise}\n     */\n    post(path = '', data = {}) {\n        return Promise.reject('Not implemented!');\n    }\n\n    /**\n     * Performs a PUT request.\n     * @param {string} [path] Path on the endpoint.\n     * @param {Object} [data] Data payload.\n     * @returns {Promise}\n     */\n    put(path = '', data = {}) {\n        return Promise.reject('Not implemented!');\n    }\n\n    /**\n     * Returns the full path based this.baseURL and path.\n     * @param {string} path\n     * @returns {string}\n     */\n    getURL(path) {\n        path = path + '';\n\n        if (path.match('://')) {\n            return path;\n        } else if (path) {\n            let concatenatedURL = this.baseURL + '/' + path;\n            return concatenatedURL.replace(/([^:])\\/\\/+/g, '$1/');  // Removes double slashes (//) in path.\n        }\n\n        return this.baseURL;\n    }\n}\n","/** @module */\n\n/**\n * Response object modeled after aurelia-http-client HTTPResponseMessage.\n * @class\n */\nexport class HttpResponseMessage {\n    /**\n     * Creates HttpResponseMessage.\n     * @param {Object} response\n     */\n    constructor(response) {\n        /** @type {Object} */\n        this.headers = {};\n\n        /** @type {Object} */\n        this.response = {};\n\n        /** @type {Object} */\n        this.responseType = 'text/json';\n\n        /** @type {Object} */\n        this.statusCode = 0;\n\n        /** @type {Object} */\n        this.statusText = '';\n\n        if (response) {\n            Object.assign(this, response);\n        }\n    }\n\n    /**\n     * Creates a string representation for this HttpResponseMessage.\n     * @returns {string}\n     */\n    toString() {\n        return `${this.statusCode} ${this.statusText}`.trim();\n    }\n}\n","/** @module */\nimport axios, {CancelToken} from 'axios';\nimport URI from 'urijs';\n\nimport {AbstractHTTPClient} from './abstract-http-client';\nimport {HttpResponseMessage} from './http-response-message';\n\n/**\n * HTTP client based on Axios.\n * (Response) interface is modeled after aurelia-http-client.\n * @class\n */\nexport class AxiosHTTPClient extends AbstractHTTPClient {\n    /**\n     * Configures HTTPClient instance.\n     * @param {AbstractConsumer} consumer Reference to consumer instantiating this object.\n     */\n    constructor(consumer) {\n        super(consumer);\n\n        /** @type {Object} */\n        this.cancelSource = CancelToken.source();\n    }\n\n    /**\n     * Returns the configuration for axios based on this.headers and query.\n     * Makes sure the response schema closely matches former versions using aurelia-http-client.\n     * @param {Object} [data] Data payload.\n     * @param {Object} [query] Query parameters.\n     * @returns {Object}\n     */\n    getConfiguration(data, query) {\n        // Makes sure the response schema closely matches former versions using aurelia-http-client.\n        if (!axios.configured) {\n            axios.interceptors.response.use(this.createResponse.bind(this), this.createError.bind(this));\n            axios.configured = true;\n        }\n\n        // Returns the configuration for axios based on this.headers and query.\n        return {\n            cancelToken: this.cancelSource.token,\n            headers: this.headers,\n            params: query,\n            transformResponse: json => json,  // Use Consumer instance for parsing.\n            data: JSON.stringify(data),  // Bypass Axios serializer for data.\n            withCredentials: this.consumer.csrfProtection,\n            xsrfCookieName: this.consumer.csrfCookie,\n            xsrfHeaderName: this.consumer.csrfHeader\n        };\n    }\n\n    /**\n     * Converts Axios response to HttpResponseMessage.\n     * @param {Object} response\n     * @returns {HttpResponseMessage}\n     */\n    createResponse(response) {\n        return new HttpResponseMessage({\n            headers: response.headers,\n            requestMessage: response.request,\n            response: response.data,\n            responseType: 'text/json',\n            statusCode: response.status,\n            statusText: response.statusText\n        });\n    }\n\n    /**\n     * Converts Axios error to HttpResponseMessage.\n     * @param error\n     * @returns {Promise<never>}\n     */\n    createError(error) {\n        let statusCode;\n\n        try {\n            if (typeof error === 'string') {\n                statusCode = parseInt(error.match(/\\d+/)[0]);\n            } else {\n                statusCode = error.response.status;\n            }\n        } catch (e) {\n            statusCode = 0;\n        }\n\n        return Promise.reject(new HttpResponseMessage({\n            statusCode: statusCode,\n            statusText: error,\n            __CANCEL__: Boolean(error.__CANCEL__),\n        }));\n    }\n\n    /**\n     * Adds/implements abort (and cancel) methods to Axios provided promise.\n     * @param {Promise} axiosPromise\n     * @returns {Promise}\n     */\n    withAbort(axiosPromise) {\n        let promise = axiosPromise\n            .catch(thrown => {\n                if (axios.isCancel(thrown)) {\n                    return Promise.reject(new HttpResponseMessage({\n                        response: thrown,\n                        responseType: 'abort',\n                        statusCode: 0,\n                        statusText: '',\n                    }));\n                } else {\n                    return Promise.reject(thrown);\n                }\n            });\n\n        promise.abort = this.cancelSource.cancel;\n        promise.cancel = this.cancelSource.cancel;\n        return promise;\n    }\n\n    /**\n     * Performs a DELETE request.\n     * @param {string} [path] Path on the endpoint.\n     * @param {Object} [data] Data payload.\n     * @returns {Promise}\n     */\n    delete(path = '', data = {}) {\n        return this.request('delete', path, data);\n    }\n\n    /**\n     * Performs a GET request.\n     * @param {string} [path] Path on the endpoint.\n     * @param {Object} [data] Data payload.\n     * @returns {Promise}\n     */\n    get(path = '', data = {}) {\n        return this.request('get', path, data);\n    }\n\n    /**\n     * Performs a PATCH request.\n     * @param {string} [path] Path on the endpoint.\n     * @param {Object} [data] Data payload.\n     * @returns {Promise}\n     */\n    patch(path = '', data = {}) {\n        return this.request('patch', path, data);\n    }\n\n    /**\n     * Performs a POST request.\n     * @param {string} [path] Path on the endpoint.\n     * @param {Object} [data] Data payload.\n     * @returns {Promise}\n     */\n    post(path = '', data = {}) {\n        return this.request('post', path, data);\n    }\n\n    /**\n     * Performs a PUT request.\n     * @param {string} [path] Path on the endpoint.\n     * @param {Object} [data] Data payload.\n     * @returns {Promise}\n     */\n    put(path = '', data = {}) {\n        return this.request('put', path, data);\n    }\n\n    /**\n     * Performs the Axios request.\n     * @param {string} method The method to use.\n     * @param {string} [path] Path on the endpoint.\n     * @param {Object} [data] Data payload.\n     * @returns {Promise}\n     */\n    request(method, path = '', data = {}) {\n        let uri = URI(path);\n        let query = uri.query(true);\n        uri.query(false);\n        path = uri.toString();\n\n        method = method.toLowerCase();\n        let promise;\n\n        if (method === 'get' || method === 'delete') {\n            promise = axios[method](this.getURL(path), this.getConfiguration(data, query));\n        } else {\n            promise = axios[method](this.getURL(path), data, this.getConfiguration(data, query));\n        }\n        return this.withAbort(promise);\n    }\n}\n","/** @module */\n\n/**\n * Abstract base class for list of consumer objects.\n * @abstract\n */\nexport class AbstractList extends Array {\n    /**\n     * Creates a new object.\n     * @param {AbstractConsumerObject[]} objects Items to populate list with.\n     * @param {Consumer} consumer Consumer instance for this object.\n     * @param {Object} responseData The response data as Object.\n     */\n    constructor(objects, consumer, responseData={}) {\n        super(...objects);\n\n        /** {Object} The response data as Object. */\n        this.responseData = responseData;\n\n        let keys = Object.keys(responseData);\n\n        for (let i in keys) {\n            if (keys.hasOwnProperty(i)) {\n                let key = keys[i];\n                this.responseData[key] = responseData[key];\n            }\n        }\n\n        /** {AbstractConsumer} Reference to consumer instantiating this object. */\n        this.__consumer__ = consumer;\n    }\n}\n","/** @module */\nimport { AbstractList } from './abstract-list';\n\n\n/**\n * List of consumer objects.\n * @class\n */\nexport class List extends AbstractList {}\n","/** @module */\n\n/**\n * Returns a new object describing the changed field in objNew.\n * Each field is compared against objOld:\n * - Only changed fields are included.\n * - Arrays are considered as a single entity (if one items differs, the entire array is considered changed).\n * - Objects are checked recusively.\n * - Primitives are checked by value.\n * @param  {Object} objOld\n * @param  {Object} objNew\n * @returns {Object}\n */\nexport function diff(objOld, objNew) {  // jshint maxdepth:3\n    let result = {};\n\n    for (let key of Object.keys(objNew)) {\n        let valueOld = (objOld) ? objOld[key] : null,\n            valueNew = objNew[key];\n\n        // Arrays are considered as a single entity (if one items differs, the array is considered changed).\n        if (Array.isArray(valueNew)) {\n            let objDiff =  diff(valueNew, valueOld);\n\n            // No items in object (inital value), discard this key.\n            if (!Object.keys(objDiff).length) {\n                continue;\n            }\n\n            result[key] = valueNew;\n        }\n\n\n        // Objects are checked recusively.\n        else if (isObject(valueNew)) {\n            let objDiff =  diff(valueOld, valueNew);\n\n            // No items in object (inital value), discard this key.\n            if (!Object.keys(objDiff).length) {\n                continue;\n            }\n\n            result[key] = objDiff;\n        }\n\n        // Primitives are checked by value.\n        else {\n            // No difference beweteen valueNew and valueOld, discard this key.\n            if (valueNew === valueOld) {\n                continue;\n            }\n\n            result[key] = valueNew;\n        }\n    }\n\n    for (let key of Object.keys(objOld)) {\n        let valueNew = objNew[key];\n\n        if (!valueNew) {\n            result[key] = null;\n        }\n    }\n\n    return result;\n}\n\n\n/**\n * Returns object without keys listed in object.unserializableFields.\n * @param {Object} object\n * @param {string[]} [unserializableFields=object.\\_\\_consumer\\_\\_.unserializableFields]\n * @returns {Object}\n */\nexport function excludeUnserializableFields(object, unserializableFields=object.__consumer__.unserializableFields) {\n    let result = {};\n\n    for (let [key, value] of Object.entries(object)) {\n        if (unserializableFields.indexOf(key) > -1) {\n            continue;\n        }\n\n        result[key] = value;\n    }\n    return result;\n}\n\n\n/**\n * Returns whether object is an object.\n * @param {*} object\n * @returns {boolean}\n */\nexport function isObject(object) {\n    return Object.prototype.toString.call(object) === '[object Object]';\n}\n","/** @module */\nimport { AureliaCookie } from 'aurelia-cookie';\nimport URI from 'urijs';\n\nimport { AxiosHTTPClient } from './axios-http-client';\nimport { List } from './list';\nimport { excludeUnserializableFields, isObject } from './utils';\n\n\n/**\n * Abstract base class for all consumers.\n * @abstract\n */\nexport class AbstractConsumer {\n    /**\n     * Configures Consumer instance.\n     * @param {string} endpoint Base endpoint for this API.\n     * @param {AbstractConsumerObject} objectClass Class to cast results to.\n     * @param {Object} [options] Additional configuration.\n     */\n    constructor(endpoint, objectClass, options=null) {\n        /** {string} The value of the Content-Type header. */\n        this.contentType = 'application/json';\n\n        /** {boolean} Wheter CSRF prtection is active. */\n        this.csrfProtection = true;\n\n        /** {string} The name for the CSRF cookie. */\n        this.csrfCookie = 'csrftoken';\n\n        /** {string} The name for the CSRF header. */\n        this.csrfHeader = 'X-CSRFToken';\n\n        /** {Object} An optional object holding key value pairs of additional headers. */\n        this.defaultHeaders = {\n            'Accept': 'application/json',\n        };\n\n        /** {Object} An optional object holding key value pairs of additional query parameters.*/\n        this.defaultParameters = {};\n\n        /** {string} The base API endpoint prefixed for all requests. */\n        this.endpoint = endpoint;\n\n        /** {Function} The class to casts objects to. */\n        this.objectClass = objectClass;\n\n        /** {Function} The class to use for lists. */\n        this.listClass = List;\n\n        /** {string} An optional dot separated path to the received objectClass' data. */\n        this.parserDataPath = '';  // TODO: Specify for both list and object.\n\n        /** {string[]} Keys on this.objectClass that should not be passed to the API. */\n        this.unserializableFields = ['__consumer__'];\n\n        /** {AbstractHTTPClient} The HttpClient instance to work with. */\n        this.client = new AxiosHTTPClient(this);\n\n        if (options) {\n            Object.assign(this, options);\n        }\n    }\n\n    /**\n     * Performs a DELETE request.\n     * @param {string} path Path on the endpoint.\n     * @param {Object} query Query parameters.\n     * @returns {Promise}\n     */\n    delete(path = '', query = {}) {\n        let uri = URI.build({'path': path, 'query': URI.buildQuery(query)});\n        return this.request('delete', uri, {});\n    }\n\n    /**\n     * Performs a GET request.\n     * @param {string} path Path on the endpoint.\n     * @param {Object} query Query parameters.\n     * @returns {Promise}\n     */\n    get(path = '', query = {}) {\n        let uri = URI.build({'path': path + '', 'query': URI.buildQuery(query)});\n        return this.request('get', uri, {});\n    }\n\n    /**\n     * Performs a PATCH request.\n     * @param {string} path Path on the endpoint.\n     * @param {Object} data Data payload.\n     * @returns {Promise}\n     */\n    patch(path = '', data = {}, query = {}) {\n        let uri = URI.build({'path': path, 'query': URI.buildQuery(query)});\n        return this.request('patch', uri, data);\n    }\n\n    /**\n     * Performs a POST request.\n     * @param {string} path Path on the endpoint.\n     * @param {Object} data Data payload.\n     * @returns {Promise}\n     */\n    post(path = '', data = {}, query = {}) {\n        let uri = URI.build({'path': path, 'query': URI.buildQuery(query)});\n        return this.request('post', uri, data);\n    }\n\n    /**\n     * Performs a PUT request.\n     * @param {string} path Path on the endpoint.\n     * @param {Object} data Data payload.\n     * @returns {Promise}\n     */\n    put(path = '', data = {}, query = {}) {\n        let uri = URI.build({'path': path, 'query': URI.buildQuery(query)});\n        return this.request('put', uri, data);\n    }\n\n    /**\n     * Performs a request.\n     * @param {string} method The method to use.\n     * @param {string} [path] Path on the endpoint, may contain query parameters for backwards compatibility.\n     * @param {Object} [data] Data payload.\n     * @returns {Promise}\n     */\n    request(method, path='', data={}) {\n        let clientPromise;\n        let consumerPromise;\n\n        // Set base url\n        this.client.setBaseURL(this.endpoint);\n\n        // Set content type\n        this.addHeader('Content-Type', this.contentType);\n\n        // Set default headers\n        for (let header of Object.keys(this.defaultHeaders)) {\n            this.addHeader(header, this.defaultHeaders[header]);\n        }\n\n        // Build query\n        let uri = URI(path);\n        uri.addQuery(this.defaultParameters);\n\n        // Serialize data\n        data = this.serialize(data);\n\n        // Return cancellable promise\n        clientPromise = this.client[method](uri.toString(), data);\n        consumerPromise = clientPromise\n                .then(response => this.requestSuccess(response, method, uri.toString(), data))\n                .catch(this.requestFailed.bind(this));\n\n        consumerPromise.abort = clientPromise.abort;\n        consumerPromise.cancel = clientPromise.cancel;\n        return consumerPromise;\n    }\n\n    /**\n     * Wrapper for Cookie.get.\n     * @param {string} name\n     * @returns {string}\n     */\n    getCookie(name) {\n        return AureliaCookie.get(name);\n    }\n\n    /**\n     * Adds a header to all future request.\n     * @param {string} name\n     * @param {string} value\n     */\n    addHeader(name, value) {\n        this.client.addHeader(name, value);\n    }\n\n    /**\n     * Serializes data.\n     * Returns data if data is not an object.\n     * Excludes fields marked in this.unserializableFields.\n     * @param {(AbstractConsumerObject|*)} data\n     * @returns {*}\n     */\n    serialize(data) {\n        // Returns data if data is not an object\n        if (!isObject(data)) {\n            return data;\n        }\n\n        // Excludes fields marked in this.unserializableFields\n        return excludeUnserializableFields(data, this.unserializableFields);\n    }\n\n    /**\n     * Callback for request.\n     * Gets called if request resolve successfully.\n     * @param {HttpResponseMessage} response\n     * @param {string} method The request method.\n     * @param {string} path The request path.\n     * @param {Object} data The request data payload.\n     * @returns {(AbstractConsumerObject|AbstractList)}\n     */\n    requestSuccess(response, method, path, data) {\n        let result = this.parse(response.response, method, path, data);\n        return Promise.resolve(result);\n    }\n\n    /**\n     * Parses JSON string to a single or list of AbstractConsumerObject instance(s).\n     * @param {string} json The response json.\n     * @param {string} method The request method.\n     * @param {string} path The request path.\n     * @param {Object} data The request data payload.\n     * @returns {(AbstractConsumerObject|AbstractList|undefined)}\n     */\n    parse(json, method, path, data) {\n        if (!json) {\n            return;\n        }\n\n        // Convert json to object.\n        let object = json;\n        if (typeof json === 'string') {\n            object = JSON.parse(json);\n        }\n\n        // Extract the relevant data.\n        let parserObject = JSON.parse(JSON.stringify(object)); // Clone.\n        if (this.parserDataPath) {\n            let parts = this.parserDataPath.split('.');\n            parts.forEach(part => {\n                parserObject = parserObject[part];\n            });\n        }\n\n        // this.parserDataPath was not found in response.\n        if (!parserObject) {\n            parserObject = object;\n        }\n\n        // Parse as list if response is a array.\n        if (Array.isArray(parserObject)) {\n            return this.parseList(parserObject, object, method, path, data);\n        }\n\n        // Parse as single item otherwise.\n        return this.parseScalar(parserObject, object, method, path, data);\n    }\n\n    /**\n     * Parses anonymous objects to a list of AbstractConsumerObjects.\n     * Gets called when result JSON.parse is an array.\n     * @param {Object[]} array\n     * @param {Object} responseData The response data as Object.\n     * @param {string} method The request method.\n     * @param {string} path The request path.\n     * @param {Object} data The request data payload.\n     * TODO: Cleanup\n     * @returns {AbstractList}\n     */\n    parseList(array, responseData, method, path, data) {\n        let consumerObjects = array.map(object => this.parseEntity(object, responseData, method, path, data));\n        return new this.listClass(consumerObjects, this, responseData, method, path, data);\n    }\n\n    /**\n     * Parses anonymous object to a single AbstractConsumerObject.\n     * Gets called when result JSON.parse is not an array.\n     * @param {Object} object\n     * @param {Object} responseData The response data as Object.\n     * @param {string} method The request method.\n     * @param {string} path The request path.\n     * @param {Object} data The request data payload.\n     * TODO: Cleanup, rename\n     * @returns {AbstractConsumerObject}\n     */\n    parseScalar(object, responseData, method, path, data) {\n        return this.parseEntity(object, responseData, method, path, data);\n    }\n\n    /**\n     * Parses anonymous object to a single AbstractConsumerObject.\n     * @param {Object} object\n     * @param {Object} responseData The response data as Object.\n     * @param {string} method The request method.\n     * @param {string} path The request path.\n     * @param {Object} data The request data payload.\n     * @returns {AbstractConsumerObject}\n     */\n    parseEntity(object, responseData, method, path, data) {  // jshint ignore:line\n        return new this.objectClass(object, this);\n    }\n\n    /**\n     * Callback for request.\n     * Gets called if request doesnt resolve successfully.\n     * @param {HttpResponseMessage} data\n     * @returns {HttpResponseMessage} data\n     */\n    requestFailed(data) {\n        return Promise.reject(data);\n    }\n}\n","/** @module */\nimport { AbstractConsumer } from './abstract-consumer';\n\n\n/**\n * Extend, instantiate and configure to request API endpoints.\n * @see {@link abstract-consumer.md} for inherited API.\n * @abstract\n */\nexport class Consumer extends AbstractConsumer {}\n","/** @module */\n\n/**\n * Abstract base class for object derived from Consumer\n * @abstract\n */\nexport class AbstractConsumerObject {\n    /**\n     * Creates a new object.\n     * @param {Object} data Data to parse.\n     * @param {Consumer} consumer Consumer instance for this object.\n     */\n    constructor(data, consumer) {\n        this.createFromObject(data);\n\n        /** {AbstractConsumer} Reference to consumer instantiating this object. */\n        this.__consumer__ = consumer;\n    }\n\n    /**\n     * Populates object with data consumed in data.\n     * @param {Object} data Data to parse.\n     */\n    createFromObject(data) {\n        let keys = Object.keys(data);\n\n        for (let i in keys) {\n            if (keys.hasOwnProperty(i)) {\n                let key = keys[i];\n                this[key] = data[key];\n            }\n        }\n    }\n}\n","/** @module */\nimport { AbstractConsumerObject } from './abstract-consumer-object';\n\n\n/**\n * Base class for object derived from Consumer.\n * Should be extended to provide methods for objects.\n * @see {@link abstract-consumer-object.md} for inherited API.\n * @abstract\n */\nexport class ConsumerObject extends AbstractConsumerObject {}\n","/** @module */\nimport { AbstractConsumerObject } from './abstract-consumer-object';\nimport { diff, excludeUnserializableFields } from './utils';\n\n\n/**\n * Base class for object derived from Consumer.\n * Contains various methods for common CRUD tasks.\n * Should be extended to provide methods for objects.\n * @see {@link abstract-consumer-object.md} for inherited API.\n * @abstract\n */\nexport class CrudConsumerObject extends AbstractConsumerObject {\n    /**\n     * Creates a new object.\n     * @param {Object} data Data to parse.\n     * @param {CrudConsumer} consumer Consumer instance for this object.\n     */\n    constructor(data, consumer) {\n        super(data, consumer);\n\n        /** {Object} A clone of the initial state before any modifications were made. */\n        this.__initial_state__ = JSON.parse(JSON.stringify(data));  // Create a rough clone\n    }\n\n    /**\n     * Partially Updates the object by performing a PATCH request.\n     * Only sends the changed fields as data.\n     * If no fields have changed, request is omitted and a resolving Promise is returned.\n     * After the requests resolves the initial state is updated (to allow future change detections).\n     * @returns {Promise}\n     */\n    update() {\n        let path = this.getPath(),\n            newState = excludeUnserializableFields(this),\n            changedState = this.getChangedFields();\n\n\n        if (!path) {\n            throw new Error('Can\\'t determine path, please set pk or id or define getPath()');\n        }\n\n        // If no fields have changed, request is omitted and a resolving Promise is returned\n        if (Object.keys(changedState).length === 0) {\n            return Promise.resolve(this);\n        }\n\n        // Only sends the changed fields as data\n        return this.__consumer__.patch(path, changedState)\n            .then(() => {\n                // After the requests resolves the initial state is updated (to allow future change detections)\n                this.__initial_state__= newState;\n                return Promise.resolve(this);\n            });\n    }\n\n    /**\n     * Fully Updates the object by performing a PUT request.\n     * Sends all fields as data.\n     * After the requests resolves the initial state is updated (to allow future change detections).\n     * @returns {Promise}\n     */\n    save() {\n        let path = this.getPath(),\n            newState = excludeUnserializableFields(this);\n\n        if (!path) {\n            throw new Error('Can\\'t determine path, please set pk or id or define getPath()');\n        }\n\n        // Sends all fields as data\n        return this.__consumer__.put(path, this)\n            .then(() => {\n                // After the requests resolves the initial state is updated (to allow future change detections)\n                this.__initial_state__= newState;\n                return Promise.resolve(this);\n            });\n    }\n\n    /**\n     * Removes this object.\n     * @returns {Promise}\n     */\n    delete() {\n        let path = this.getPath();\n\n        if (!path) {\n            throw new Error('Can\\'t determine path, please set pk or id or define getPath()');\n        }\n\n        return this.__consumer__.delete(path);\n    }\n\n    /**\n     * Returns the path for this object.\n     * Path is assumed to be the primary key.\n     * If no key is found, false is returned.\n     * @returns {(string|false)}\n     */\n    getPath() {\n        let pk =  this.getPK();\n\n        if (pk) {\n            return pk + '';\n        }\n        return false;\n    }\n\n    /**\n     * Tries to return the primary key of this object.\n     * First tries this.pk, this.id otherwise.\n     * If this.pk and this.id are both empty, false is returned.\n     * @returns {(*|false)} Value of pk/id or false.\n     */\n    getPK() {\n        return (this.pk || this.id || false);\n    }\n\n    /**\n     * Returns an object containing the changed properties of this object.\n     * Property names in this.\\_\\_consumer\\_\\_.unserializableFields are ignored.\n     * Properties are compared against this.\\_\\_initial_state\\_\\_.\n     * @returns {Object}\n     */\n    getChangedFields() {\n        let data = {};\n        for (let [key, value] of Object.entries(this)) {\n            // Property names in this.__consumer__.unserializableFields are ignored\n            if (this.__consumer__.unserializableFields.indexOf(key) > -1) {\n                continue;\n            }\n\n            data[key] = value;\n        }\n\n        return diff(this.__initial_state__, excludeUnserializableFields(this));\n    }\n}\n","/** @module */\nimport { AbstractConsumer } from './abstract-consumer';\nimport { CrudConsumerObject } from './crud-consumer-object';\n\n\n/**\n * Extend, instantiate and configure to request API endpoints.\n * Contains various methods for common CRUD tasks.\n * @see {@link abstract-consumer.md} for inherited API.\n * @abstract\n */\nexport class CrudConsumer extends AbstractConsumer {\n    /**\n     * Configures CrudConsumer instance.\n     * @param {string} endpoint Base endpoint for this API.\n     * @param {CrudConsumerObject} [objectClass=CrudConsumerObject] Class to cast results to.\n     * @param {Object} [options] Additional configuration.\n     */\n    constructor(endpoint, objectClass=CrudConsumerObject, options=null) {\n        super(endpoint, objectClass, options);\n\n        // Add __initial_state__ to unserializableFields\n        this.unserializableFields.push('__initial_state__');\n    }\n\n    /**\n     * Creates an object by performing a POST request.\n     * @param {Object} object Object to create.\n     * @returns {Promise}\n     */\n    create(object) {\n        return super.post('', object);\n    }\n\n    /**\n     * Retrieves an object by performing a GET request.\n     * @param {(number|string)} id\n     * @returns {Promise}\n     */\n    read(id) {\n        return super.get(id);\n    }\n}\n","/** @module */\nimport URI from 'urijs';\nimport { AbstractList } from './abstract-list';\n\n\n/**\n * Abstract base class for paginated lists.\n * @see {@link abstract-list.md} for inherited API.\n * @abstract\n */\nexport class AbstractPageNumberList extends AbstractList {\n    /**\n     * @param {AbstractConsumerObject[]} objects Items to populate list with.\n     * @param {Consumer} consumer Consumer instance for this object.\n     * @param {Object} responseData The responseData result as Object.\n     * @param {string} [method='get'] The request method.\n     * @param {string} [path=''] The request path.\n     * @param {Object} [data={}] The request data payload.\n    */\n    constructor(objects, consumer, responseData, method='get', path='', data={}) {\n        super(objects, consumer, responseData, method, path, data);\n\n        /** {string} The method of the request. */\n        this.currentMethod = method;\n\n        /** {string} The path of the request. */\n        this.currentPath = path;\n\n        /** {string} The payload of the request. */\n        this.currentData = data;\n\n        /** {string} The field to recover the page from. */\n        this.pageField = 'page';\n\n        /** {string} The parameter to indicate the request page with. */\n        this.pageQueryParam = 'page';\n\n        /** {number} The current page. */\n        this.page = parseInt(this.responseData[this.pageField]);\n\n        /** {string} The field to recover the amount of page from. */\n        this.pageCountField = 'count';\n\n        /** {number} The amount of pages. */\n        this.pageCount = parseInt(this.responseData[this.pageCountField]);\n\n        /** {number} The amount of objects on a page. */\n        this.pageSize = this.length;\n    }\n\n    /**\n     * Requests the first page.\n     * @returns {Promise}\n     */\n    first() {\n        return this.goToPage(1);\n    }\n\n    /**\n     * Requests the last page.\n     * @returns {Promise}\n     */\n    last() {\n        return this.goToPage(this.pageCount);\n    }\n\n    /**\n     * Requests the previous page.\n     * @returns {Promise}\n     */\n    previous() {\n        return this.goToPage(Math.max(this.page - 1, 1));\n    }\n\n    /**\n     * Requests the next page.\n     * @returns {Promise}\n     */\n    next() {\n        return this.goToPage(Math.min(this.page + 1, this.pageCount));\n    }\n\n    /**\n     * Navigates to page.\n     * Only replays method and payload when forceGet=false.\n     * @param {number} page\n     * @param {boolean} [forceGet=true]\n     */\n    goToPage(page, forceGet=true) {\n        let method = (forceGet) ? 'get' : this.currentMethod;\n        let data =  (forceGet) ? {} : this.currentData;\n        return this.requestPage(page, method, data);\n    }\n\n    /**\n     * Requests a page\n     * @param {number} page\n     * @param {string} method\n     * @param {Object} data\n     * @returns {Promise}\n     */\n    requestPage(page, method, data) {\n        let uri = URI(this.currentPath)\n            .setSearch(this.pageQueryParam, page);\n\n        return this.__consumer__.request(method, uri.toString(), data);\n    }\n}\n","/** @module */\nimport { AbstractPageNumberList } from './abstract-page-number-list';\n\n\n/**\n * A list with page number pagination.\n * @see {@link abstract-page-number-list.md} for inherited API.\n * @class\n */\nexport class PageNumberList extends AbstractPageNumberList {}\n","/** @module */\nimport { AbstractPageNumberList } from './abstract-page-number-list';\n\n\n/**\n * A list with linked page number pagination.\n * @see {@link abstract-page-number-list.md} for inherited API.\n * @class\n */\nexport class LinkedPageNumberList extends AbstractPageNumberList {\n    /**\n     * Requests the previous page.\n     * @returns {Promise}\n     */\n    previous() {\n        if (typeof this.responseData.previous !== 'string') {\n            return Promise.resolve(this);\n        }\n\n        let path = this.responseData.previous;\n        return this.__consumer__.get(path);\n    }\n\n    /**\n     * Requests the next page.\n     * @returns {Promise}\n     */\n    next() {\n        if (typeof this.responseData.next !== 'string') {\n            return Promise.resolve(this);\n        }\n\n        let path = this.responseData.next;\n        return this.__consumer__.get(path);\n    }\n}\n","import { Consumer } from './consumer';\nexport { ConsumerObject } from './consumer-object';\nexport { CrudConsumer } from './crud-consumer';\nexport { CrudConsumerObject } from './crud-consumer-object';\n\nexport { AbstractList } from './abstract-list';\nexport { AbstractPageNumberList } from './abstract-page-number-list';\nexport { List } from './list';\nexport { PageNumberList } from './page-number-list';\nexport { LinkedPageNumberList } from './linked-page-number-list';\n\nexport { AbstractHTTPClient } from './abstract-http-client';\nexport { AxiosHTTPClient } from './axios-http-client';\n\nimport * as utils from './utils';\n\nexport default Consumer;\nexport { Consumer };\nexport { utils };\n"],"sourceRoot":""}