{"version":3,"sources":["abstract-consumer-object.js","abstract-consumer.js","consumer-object.js","consumer.js","crud-consumer-object.js","crud-consumer.js"],"names":[],"mappings":"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","file":"consumerjs.js","sourcesContent":["/**\n * Abstract base class for object derived from Consumer\n * @abstract\n */\nexport class AbstractConsumerObject {\n    /**\n     * Creates a new object\n     * @param {Object} data Data to parse\n     * @param {Consumer} consumer Consumer instance for this object\n     */\n    constructor(data, consumer) {\n        this.createFromObject(data);\n        this.__consumer__ = consumer;\n    }\n\n    /**\n     * Populates object with data consumed in data\n     * @param {Object} data Data to parse\n     */\n    createFromObject(data) {\n        let keys = Object.keys(data);\n\n        for (let i in keys) {\n            if (keys.hasOwnProperty(i)) {\n                let key = keys[i];\n                this[key] = data[key];\n            }\n        }\n    }\n}\n","import { Cookie } from 'aurelia-cookie';\nimport { HttpClient } from 'aurelia-http-client';\nimport { initialize } from 'aurelia-pal-browser';\nimport URI from 'urijs';\n\n\n/**\n * Abstract base class for consumers\n * @abstract\n */\nclass AbstractConsumer {\n    /**\n     * Configures Consumer instance\n     * @param {String} endpoint Base endpoint for this API\n     * @param {AbstractConsumerObject} objectClass Class to cast results to\n     * @param {Object} [options] Additional configuration\n     */\n    constructor(endpoint, objectClass, options=null) {\n        /** The Aurelia HttpClient instance to work with */\n        this.client = new HttpClient();\n\n        /** The value of the Content-Type header */\n        this.contentType = 'application/json';\n\n        /** The name for the CSRF cookie */\n        this.csrfCookie = 'csrftoken';\n\n        /** The name for the CSRF header */\n        this.csrfHeader = 'X-CSRFToken';\n\n        /** An optional object holding key value pairs of additional headers */\n        this.defaultHeaders = {};\n\n        /** An optional object holding key value pairs of additional query parameters */\n        this.defaultParameters = {};\n\n        /** The base API endpoint prefixed for all requests */\n        this.endpoint = endpoint;\n\n        /** The class to casts objects to */\n        this.objectClass = objectClass;\n\n        /** An optional dot separated path to the received objectClass' data */\n        this.parserDataPath = '';\n\n        /** Keys on this.objectClass that should not be passed to the API */\n        this.unserializableFields = ['__consumer__'];\n\n        if (options) {\n            Object.assign(this, options);\n        }\n\n        initialize();\n    }\n\n    /**\n     * Performs a DELETE request\n     * @param {String} path Path on the endpoint\n     * @param {Object} query Query parameters\n     * @returns {Promise}\n     */\n    delete(path = '', query = {}) {\n        let uri = URI.build({'path': path, 'query': URI.buildQuery(query)});\n        return this.request('delete', uri, {});\n    }\n\n    /**\n     * Performs a GET request\n     * @param {String} path Path on the endpoint\n     * @param {Object} query Query parameters\n     * @returns {Promise}\n     */\n    get(path = '', query = {}) {\n        let uri = URI.build({'path': path + '', 'query': URI.buildQuery(query)});\n        return this.request('get', uri, {});\n    }\n\n    /**\n     * Performs a PATCH request\n     * @param {String} path Path on the endpoint\n     * @param {Object} data Data payload\n     * @returns {Promise}\n     */\n    patch(path = '', data = {}, query = {}) {\n        let uri = URI.build({'path': path, 'query': URI.buildQuery(query)});\n        return this.request('patch', uri, data);\n    }\n\n    /**\n     * Performs a POST request\n     * @param {String} path Path on the endpoint\n     * @param {Object} data Data payload\n     * @returns {Promise}\n     */\n    post(path = '', data = {}, query = {}) {\n        let uri = URI.build({'path': path, 'query': URI.buildQuery(query)});\n        return this.request('post', uri, data);\n    }\n\n    /**\n     * Performs a PUT request\n     * @param {String} path Path on the endpoint\n     * @param {Object} data Data payload\n     * @returns {Promise}\n     */\n    put(path = '', data = {}, query = {}) {\n        let uri = URI.build({'path': path, 'query': URI.buildQuery(query)});\n        return this.request('put', uri, data);\n    }\n\n    /**\n     * Performs a request\n     * @param {String} method The method to use\n     * @param {String} path Path on the endpoint\n     * @param {Object} data Data payload\n     * @returns {Promise}\n     */\n    request(method, path, data) {\n        let clientPromise,\n            consumerPromise;\n\n        // Set base url\n        this.client.configure(x => {\n            x.withBaseUrl(this.endpoint);\n        });\n\n        // Set content type\n        this.addHeader('Content-Type', this.contentType);\n\n        // Set csrf token if needed\n        if (!this.isSafeMethod(method) && this.csrfCookie && this.csrfHeader) {\n            this.addCsrfToken();\n        }\n\n        // Set default headers\n        for (let header of Object.keys(this.defaultHeaders)) {\n            this.addHeader(header, this.defaultHeaders[header]);\n        }\n\n        // Build query\n        let uri = URI(path);\n        uri.addQuery(this.defaultParameters);\n\n        // Serialize data\n        data = this.serialize(data);\n\n        // Return cancellable promise\n        clientPromise = this.client[method](uri.toString(), data);\n        consumerPromise = clientPromise\n                .then(this.requestSuccess.bind(this))\n                .catch(this.requestFailed.bind(this));\n\n        consumerPromise.abort = clientPromise.abort;\n        consumerPromise.cancel = clientPromise.cancel;\n        return consumerPromise;\n    }\n\n    /**\n     * Returns whether the request is safe (should not mutate any data)\n     * @returns {Boolean}\n     */\n    isSafeMethod(method) {\n        let saveMethods = ['GET', 'HEAD', 'OPTIONS', 'TRACE'];\n        return saveMethods.includes(method.toUpperCase());\n    }\n\n    /**\n     * Looks for cookie this.csrfCookie and passes it's value to this.csrfHeader\n     */\n    addCsrfToken() {\n        let csrfToken = this.getCookie(this.csrfCookie);\n        this.defaultHeaders[this.csrfHeader] = csrfToken;\n        this.addHeader(this.csrfHeader, csrfToken);\n    }\n\n    /**\n     * Wrapper for Cookie.get\n     * @param {String} name\n     * @returns {String}\n     */\n    getCookie(name) {\n        return Cookie.get(name);\n    }\n\n    /**\n     * Adds a header to all future request\n     * @param {String} name\n     * @param {String} value\n     */\n    addHeader(name, value) {\n        this.client.configure(x => {\n            x.withHeader(name, value);\n        });\n    }\n\n    /**\n     * Serializes data\n     * Returns data if data is not an object\n     * Excludes fields marked in this.unserializableFields\n     * @param {AbstractConsumerObject|*} data\n     * @returns {*}\n     */\n    serialize(data) {\n        // Returns data if data is not an object\n        if (!this.isObject(data)) {\n            return data;\n        }\n\n        let object = {};\n\n        // Excludes fields marked in this.unserializableFields\n        for (let key of Object.keys(data)) {\n            if (!this.unserializableFields.includes(key)) {\n                object[key] = data[key];\n            }\n        }\n        return object;\n    }\n\n    /**\n     * Returns whether object is an object\n     * @param {*} object\n     * @returns {Boolean}\n     */\n    isObject(object) {\n        return Object.prototype.toString.call(object) === '[object Object]';\n    }\n\n    /**\n     * Callback for request\n     * Gets called if request resolve successfully\n     * @param {HttpResponseMessage} data\n     * @returns {AbstractConsumerObject|AbstractConsumerObject[]}\n     */\n    requestSuccess(data) {\n        let result = this.parse(data.response);\n        return Promise.resolve(result);\n    }\n\n    /**\n     * Parses JSON string to a single or list of AbstractConsumerObject instance(s)\n     * @param {String} data\n     * @returns {AbstractConsumerObject|AbstractConsumerObject[]|undefined}\n     */\n    parse(json) {\n        if (!json) {\n            return;\n        }\n\n        let object = JSON.parse(json);\n\n        if (this.parserDataPath.length) {\n            let parts = this.parserDataPath.split('.');\n\n            parts.map(part => {\n                object = object[part];\n            });\n        }\n\n        if (Array.isArray(object)) {\n            return this.parseList(object);\n        }\n        return this.parseScalar(object);\n    }\n\n    /**\n     * Parses anonymous objects to a list of AbstractConsumerObjects\n     * Gets called when result JSON.parse is an array\n     * @param {Object[]} array\n     * @returns {AbstractConsumerObject[]}\n     */\n    parseList(array) {\n        let list = [];\n\n        for (let object of array) {\n            list.push(this.parseEntity(object));\n        }\n        return list;\n    }\n\n    /**\n     * Parses anonymous object to a single AbstractConsumerObject\n     * Gets called when result JSON.parse is not an array\n     * @param {Object} object\n     * @returns {AbstractConsumerObject}\n     */\n    parseScalar(object) {\n        return this.parseEntity(object);\n    }\n\n    /**\n     * Parses anonymous object to a single AbstractConsumerObject\n     * @param {Object} object\n     * @returns {AbstractConsumerObject}\n     */\n    parseEntity(object) {\n        return new this.objectClass(object, this);\n    }\n\n    /**\n     * Callback for request\n     * Gets called if request doesnt resolve successfully\n     * @param {HttpResponseMessage} data\n     * @returns {HttpResponseMessage} data\n     */\n    requestFailed(data) {\n        return Promise.reject(data);\n    }\n}\n\n\n// Export\nexport { AbstractConsumer };\nexport default AbstractConsumer;\n","import { AbstractConsumerObject } from 'abstract-consumer-object';\n\n\n/**\n * Base class for object derived from Consumer\n * Should be extended to provide methods for objects\n * @abstract\n */\nexport class ConsumerObject extends AbstractConsumerObject {}\n","import { AbstractConsumer } from 'abstract-consumer';\n\n\n/**\n * Extend, instantiate and configure to request API endpoints\n * @abstract\n */\nclass Consumer extends AbstractConsumer {}\n\n\n// Export\nexport { Consumer };\nexport default Consumer;\n","import { AbstractConsumerObject } from 'abstract-consumer-object';\n\n\n/**\n * Base class for object derived from Consumer\n * Contains various methods for common CRUD tasks\n * Should be extended to provide methods for objects\n * @abstract\n */\nexport class CrudConsumerObject extends AbstractConsumerObject {\n    constructor(data, consumer) {\n        super(data, consumer);\n        this.__initial_state__ = data;\n\n    }\n\n    update(changedFields) {\n        return super.patch('', changedFields);\n    }\n\n    save() {\n        return super.put(this.id, this);\n    }\n\n    delete() {\n        return super.delete(this.id);\n    }\n}\n","import { AbstractConsumer } from 'abstract-consumer';\n\n/**\n * Extend, instantiate and configure to request API endpoints\n * Contains various methods for common CRUD tasks\n * @abstract\n */\nclass CrudConsumer extends AbstractConsumer {\n    /**\n     * Configures CrudConsumer instance\n     * @param {String} endpoint Base endpoint for this API\n     * @param {ConsumerObject} objectClass Class to cast results to\n     * @param {Object} [options] Additional configuration\n     */\n    constructor(endpoint, objectClass, options=null) {\n        super(endpoint, objectClass, options);\n\n        /** The class to casts objects to */\n        this.objectClass = objectClass;\n\n        // Add __initial_state__ to unserializableFields\n        this.unserializableFields.push('____initial_state__')\n    }\n\n    // TODO\n    create(object) {\n        return super.post('', object);\n    }\n\n    // TODO\n    read(id) {\n        return super.get(id);\n    }\n}\n\n\n// Export\nexport { CrudConsumer };\nexport default CrudConsumer;\n"]}